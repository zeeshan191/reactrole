{"ast":null,"code":"import { intersection } from 'lodash';\nexport function isLoggedIn() {\n  /*\n  \t* Note:\n  \t*  This app assume if local storage have roles it means\n  \t*  user is authenticated you can update this logic as per your app.\n  */\n  return !!localStorage.getItem('roles');\n}\nexport function isArrayWithLength(arr) {\n  return Array.isArray(arr) && arr.length;\n}\nexport function getAllowedRoutes(routes) {\n  const roles = JSON.parse(localStorage.getItem('roles'));\n  return routes.filter(({\n    permission\n  }) => {\n    if (!permission) return true;else if (!isArrayWithLength(permission)) return true;else return intersection(permission, roles).length;\n  });\n}","map":{"version":3,"sources":["C:/Users/HP/Downloads/reduz/src/utils/index.js"],"names":["intersection","isLoggedIn","localStorage","getItem","isArrayWithLength","arr","Array","isArray","length","getAllowedRoutes","routes","roles","JSON","parse","filter","permission"],"mappings":"AAAA,SAASA,YAAT,QAA6B,QAA7B;AAEA,OAAO,SAASC,UAAT,GAAsB;AAC5B;AACD;AACA;AACA;AACA;AACC,SAAO,CAAC,CAACC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAT;AACA;AAED,OAAO,SAASC,iBAAT,CAA2BC,GAA3B,EAAgC;AACtC,SAAQC,KAAK,CAACC,OAAN,CAAcF,GAAd,KAAsBA,GAAG,CAACG,MAAlC;AACA;AAED,OAAO,SAASC,gBAAT,CAA0BC,MAA1B,EAAkC;AACxC,QAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWX,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAd;AACA,SAAOO,MAAM,CAACI,MAAP,CAAc,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAoB;AACxC,QAAG,CAACA,UAAJ,EAAgB,OAAO,IAAP,CAAhB,KACK,IAAG,CAACX,iBAAiB,CAACW,UAAD,CAArB,EAAmC,OAAO,IAAP,CAAnC,KACA,OAAOf,YAAY,CAACe,UAAD,EAAaJ,KAAb,CAAZ,CAAgCH,MAAvC;AACL,GAJM,CAAP;AAKA","sourcesContent":["import { intersection } from 'lodash';\n\nexport function isLoggedIn() {\n\t/*\n\t\t* Note:\n\t\t*  This app assume if local storage have roles it means\n\t\t*  user is authenticated you can update this logic as per your app.\n\t*/\n\treturn !!localStorage.getItem('roles')\n}\n\nexport function isArrayWithLength(arr) {\n\treturn (Array.isArray(arr) && arr.length)\n}\n\nexport function getAllowedRoutes(routes) {\n\tconst roles = JSON.parse(localStorage.getItem('roles'));\n\treturn routes.filter(({ permission }) => {\n\t\tif(!permission) return true;\n\t\telse if(!isArrayWithLength(permission)) return true;\n\t\telse return intersection(permission, roles).length;\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}