{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\reduz\\\\src\\\\routes\\\\PrivateRoutes.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { getAllowedRoutes, isLoggedIn } from 'utils';\nimport { PrivateRoutesConfig } from 'config';\nimport { TopNav } from '../components/common';\nimport MapAllowedRoutes from 'routes/MapAllowedRoutes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PrivateRoutes() {\n  _s();\n\n  const match = useRouteMatch('/app');\n  let allowedRoutes = [];\n  if (isLoggedIn()) allowedRoutes = getAllowedRoutes(PrivateRoutesConfig);else return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 14\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TopNav, {\n      routes: allowedRoutes,\n      prefix: match.path,\n      className: \"bg-white\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MapAllowedRoutes, {\n      routes: allowedRoutes,\n      basePath: \"/app\",\n      isAddNotFound: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }, this);\n}\n\n_s(PrivateRoutes, \"zx5nH/hVPZnBbaV+fF3J0tuE528=\", false, function () {\n  return [useRouteMatch];\n});\n\n_c = PrivateRoutes;\nexport default PrivateRoutes;\n\nvar _c;\n\n$RefreshReg$(_c, \"PrivateRoutes\");","map":{"version":3,"sources":["C:/Users/HP/Downloads/reduz/src/routes/PrivateRoutes.js"],"names":["React","Fragment","Redirect","useRouteMatch","getAllowedRoutes","isLoggedIn","PrivateRoutesConfig","TopNav","MapAllowedRoutes","PrivateRoutes","match","allowedRoutes","path"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,kBAAxC;AACA,SAASC,gBAAT,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,QAApC;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACxB,QAAMC,KAAK,GAAGP,aAAa,CAAC,MAAD,CAA3B;AACA,MAAIQ,aAAa,GAAG,EAApB;AAEA,MAAIN,UAAU,EAAd,EAAkBM,aAAa,GAAGP,gBAAgB,CAACE,mBAAD,CAAhC,CAAlB,KACK,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AAEL,sBACC,QAAC,QAAD;AAAA,4BACC,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAEK,aAAhB;AAA+B,MAAA,MAAM,EAAED,KAAK,CAACE,IAA7C;AAAmD,MAAA,SAAS,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,YADD,eAEC,QAAC,gBAAD;AAAkB,MAAA,MAAM,EAAED,aAA1B;AAAyC,MAAA,QAAQ,EAAC,MAAlD;AAAyD,MAAA,aAAa;AAAtE;AAAA;AAAA;AAAA;AAAA,YAFD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAMA;;GAbQF,a;UACMN,a;;;KADNM,a;AAeT,eAAeA,aAAf","sourcesContent":["import React, { Fragment } from 'react';\nimport { Redirect, useRouteMatch } from 'react-router-dom';\nimport { getAllowedRoutes, isLoggedIn } from 'utils';\nimport { PrivateRoutesConfig } from 'config';\nimport { TopNav } from '../components/common';\nimport MapAllowedRoutes from 'routes/MapAllowedRoutes';\n\nfunction PrivateRoutes() {\n\tconst match = useRouteMatch('/app');\n\tlet allowedRoutes = [];\n\n\tif (isLoggedIn()) allowedRoutes = getAllowedRoutes(PrivateRoutesConfig);\n\telse return <Redirect to=\"/\" />;\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<TopNav routes={allowedRoutes} prefix={match.path} className=\"bg-white\" />\n\t\t\t<MapAllowedRoutes routes={allowedRoutes} basePath=\"/app\" isAddNotFound />\n\t\t</Fragment>\n\t);\n}\n\nexport default PrivateRoutes;\n"]},"metadata":{},"sourceType":"module"}